--> "((4 + 3) - 3) = 4"

-- Examples in "The Expression Problem, Trivially!"

type IEval = {eval : Int}

trait lit (x : Int) { self : IEval =>
  def eval : Int = x
}

trait add (e1 : IEval, e2 : IEval) { self : IEval =>
  def eval : Int = e1.eval + e2.eval
}

type IPrint = IEval & { print : String }

trait litP (x : Int) inherits lit(x) : IPrint { self : IPrint =>
  def print = x.toString
}

trait addP (e1 : IPrint, e2 : IPrint) inherits add(e1,e2) : IPrint { self : IPrint =>
  def print = "(" ++ e1.print ++ " + " ++ e2.print ++ ")"
}

trait sub (e1 : IEval, e2 : IEval) { self : IEval =>
  def eval : Int = e1.eval - e2.eval
}

trait subP (e1 : IPrint, e2 : IPrint) inherits sub(e1,e2) : IPrint { self : IPrint =>
  def print = "(" ++ e1.print ++ " - " ++ e2.print ++ ")"
}

val l1 = new[IEval] lit(4)

val l2 = new[IEval] lit(3)

val a = new[IEval] add (l1, l2)

val le1 = new[IPrint] litP(4)

val le2 = new[IPrint] litP(3)

val le3 = new[IPrint] addP(le1, le2)


val ae = new[IPrint] subP(le3, le2)


main = ae.print ++ " = " ++ ae.eval.toString
