--> 12.0


type Point = { x : T -> Double, y : T -> Double }
trait point(x : Double, y: Double) { self : Point =>
  def x() = x
  def y() = y
}


def abs (x : Double) = if x < 0 then (0 - x) else x

type Norm = { norm : T -> Double }
trait euclideanNorm() { self : Point =>
  def norm ()  = (self.x() * self.x() + self.y() * self.y()).sqrt
}
trait manhattanNorm() { self : Point =>
  def norm () = abs(self.x()) + abs(self.y())
}

def makePoint (norm : Trait[Point, Norm]) = new[Point & Norm] point(3,4) & norm

main = (new[Point & Norm] point(3,4) & euclideanNorm()).norm()
     + (new[Point & Norm] point(3,4) & manhattanNorm()).norm()
