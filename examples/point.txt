type Point = {x : T -> Int, y : T -> Int};

def point (x : Int) (y : Int) (self : Point) : Point =
  { x = (\_ . x) : T -> Int
  , y = (\_ . y) : T -> Int
  };


type Norm = {norm : T -> Int };

def manhattanNorm (self : Point) : Norm =
  { norm = (\_ . self.x() + self.y()) : T -> Int };

def skewedNorm (self: Point) : Norm = {
  norm = (\_ . self.x() + self.y() * 2) : T -> Int };

def point1 : Point & Norm =
  let self : Point & Norm = (point 3 4 self) ,, (manhattanNorm self)
  in self;

def point2 : Point & Norm =
  let self : Point & Norm = (point 3 4 self) ,, (skewedNorm self)
  in self;

point1.norm() + point2.norm()
