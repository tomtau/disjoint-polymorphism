--> 12.0


-- BEGIN_POINT_DEF
type Point = { x : T -> Double, y : T -> Double }
trait point(x : Double, y: Double) { self : Point =>
  def x() = x
  def y() = y
}
-- END_POINT_DEF


def abs (x : Double) = if x < 0 then (0 - x) else x

-- BEGIN_NORM_DEF
type Norm = { norm : T -> Double }
trait euclideanNorm() { self : Point =>
  def norm ()  = (self.x() * self.x() + self.y() * self.y()).sqrt
}
trait manhattanNorm() { self : Point =>
  def norm () = abs(self.x()) + abs(self.y())
}
-- END_NORM_DEF


-- BEGIN_POINT_FUNC
def makePoint (norm : Trait[Point, Norm]) = new[Point & Norm] point(3,4) & norm
-- END_POINT_FUNC

-- BEGIN_NORM_TEST
main = (new[Point & Norm] point(3,4) & euclideanNorm()).norm()
     + (new[Point & Norm] point(3,4) & manhattanNorm()).norm()
-- Output: 18
-- END_NORM_TEST


-- main = (makePoint(euclideanNorm())).norm() + (makePoint(manhattanNorm())).norm()
