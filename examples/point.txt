--> 18

type Point = { x : T -> Int, y : T -> Int };

trait point(x : Int, y: Int) { self : Point =>
  def x() : Int = x;
  def y() : Int = y;
};

type Norm = { norm : T -> Int };

trait euclideanNorm()  { self : Point =>
  def norm () : Int = self.x() + self.y();
};

trait manhattanNorm() { self : Point =>
  def norm () : Int = self.x() + 2 * self.y();
};

def makePoint (norm : Trait[Point, Norm]) : Point & Norm = new[Point & Norm] point(3,4) & norm;

makePoint(euclideanNorm()).norm() + makePoint(manhattanNorm()).norm()
