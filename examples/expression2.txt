--> "7 + 2 = 9"

type IEval = {eval : Int}

type ExpAlg[E] = {
  lit : Int -> E,
  add : E -> E -> E
}

trait evalAlg : ExpAlg[IEval] { self =>
  def lit x  = {eval = x}
  def add x y = { eval = x.eval + y.eval }
}

type SubExpAlg[E] = ExpAlg[E] & { sub : E -> E -> E }

trait subEvalAlg { self =>
  def sub (x : IEval) (y : IEval) = { eval = x.eval - y.eval }
}

type IPrint = { print : String }

trait printAlg : SubExpAlg[IPrint] { self =>
  def lit x = {print = x.toString}
  def add x y = { print = x.print ++ " + " ++ y.print }
  def sub x y = { print = x.print ++ " - " ++ y.print }
}

def e1 E (f : ExpAlg[E]) = f.add (f.lit 7) (f.lit 2)

trait combine A [B * A] (f : Trait[T, ExpAlg[A]], g : Trait[T, ExpAlg[B]]) : ExpAlg[A&B] { self =>
  def lit x = (f()).lit x ,, (g()).lit x
  def add x y = (f()).add x y ,, (g()).add x y
}


def newAlg = combine IEval IPrint (evalAlg ,, subEvalAlg) printAlg

def o = e1 (IEval & IPrint) (new[ExpAlg[IEval & IPrint]] newAlg)

main = o.print ++ " = " ++ o.eval.toString
