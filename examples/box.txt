--> ()

type Circle = {
  radius : Double
}

type CircleFns = {
  area : T -> Double,
  grow : T -> Double,
  shrink : T -> Double
}

trait circleFns : CircleFns { self : Circle =>
  def area() = self.radius * self.radius * 3.14
  def grow() = self.radius + 1
  def shrink() = self.radius - 1
}

trait circle(radius : Double) : Circle { self =>
  def radius = radius
}

def circle1 = new[Circle & CircleFns] circle(3) & circleFns


type ButtonFns = {
  hover : Bool -> String,
  press : Bool -> String,
  fire : T -> String
}

type Button = {
  label : String,
  action : T -> String
}

trait button(label : String, action : T -> String) : Button { self =>
  def label = label
  def action = action
}

trait buttonFns : ButtonFns { self : Button =>
  def hover x = if x then "hoverring..." else "no hoverring"
  def press x = if x then "pressing..." else "no pressing"
  def fire() = self.action()
}

type RoundButton = Circle & Button

trait roundButton(radius : Double, label : String, action : T -> String) inherits circle(radius) & button(label, action)

def test = new[RoundButton & CircleFns & ButtonFns] roundButton(3, "Test", \_ -> "hello") & circleFns & buttonFns
