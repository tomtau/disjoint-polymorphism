--> 3

def extend S [U*S] (first : S) (second : U) : S&U = first ,, second

type Person = {name : String, male : Bool}
type Loggable = {log : T -> Int}
type Dog = {name : String, male : String}

def person (n : String) (s : Bool)  = {name = n, male = s}

val consoleLogger : Loggable = {log = \ _ -> 3}

def dog (n : String) (s : String)  = {name = n, male = s}

val jim : Person & Loggable = extend Person Loggable (person "Jim" true) consoleLogger

main = jim.log ()

-- The following doesn't type check
-- def fool : Dog & Person = extend Dog Person (dog "Pluto" "yes") (person "Jim" true);
