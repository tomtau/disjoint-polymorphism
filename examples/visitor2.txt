--> "var x = 3.0; var y = 4.0; (if (x < y) then (x + 2.0) else (y + 1.0)) = 5.0"


-----------------------------
-- Infrastructure
-----------------------------

def undefined : forall E. E = /\E. let x : E = x in x

type MaybeAlg[B, A] = {
  nothing : B,
  just : A -> B
}

type Maybe[A] = {
   match : forall C. MaybeAlg[C,A] -> C
}

def nothing A : Maybe[A] = { match = /\C. \f -> f.nothing }

def just A (x : A) : Maybe[A] = { match = /\C. \f -> f.just x }

def bind A B (x : Maybe[A]) (f : A -> Maybe[B]) : Maybe[B] =
  x.match Maybe[B] { nothing = nothing B, just = \a -> f a }

def fromJust A (x : Maybe[A]) : A =
  x.match A { nothing = undefined A, just = \b -> b }

def isJust A (x : Maybe[A]) : Bool =
  x.match Bool { nothing = false, just = \_ -> true }

type EnvF[E] = String -> Maybe[E]

def empty A : EnvF[A] = \_ -> {match = /\C. \f -> f.nothing}

def lookup A (s : String) (env : EnvF[A]) = env s

def insert A (s1 : String) (v1 : A) (f : EnvF[A]) : EnvF[A] =
  \s2 -> if s1 == s2 then just A v1 else f s2


-----------------------------
-- Evaluation interface
-----------------------------

type Env = EnvF[Value]

type IEval = {eval : Env -> Maybe[Value]}

type ValAlg[E] = {
  numV : Double -> E,
  boolV : Bool -> E
}

type Value = {
  match : forall C. ValAlg[C] -> C
}

def numV (n : Double) : Value = { match = /\C. \f -> f.numV n }

def boolV (b : Bool) : Value = { match = /\C. \f -> f.boolV b }

def fromNum (v : Value) : Double =
  v.match Double { numV = \n -> n, boolV = \_ -> undefined Double }

def fromBool (v : Value) : Bool =
  v.match Bool { numV = \_ -> undefined Bool, boolV = \b -> b }



-----------------------------
-- Pretty printer interface
-----------------------------

type IPrint = { print : String }



-----------------------------
-- Type checker interface
-----------------------------

type TypeAlg[E] = {
  tnum : E,
  tbool : E
}

type Type = {
  match : forall E. TypeAlg[E] -> E
}


def tnum : Type = { match = /\E. \f -> f.tnum }

def tbool : Type = { match = /\E. \f -> f.tbool }

def caseType A (t : Type) (x : A) (y : A) : A =
  t.match A {tnum = x, tbool = y}

type ITCheck = { tcheck : EnvF[Type] -> Maybe[Type] }




-----------------------------
-- Base arithmetic expression
-----------------------------

type ArithAlg[E] = {
  num : Double -> E,
  add : E -> E -> E,
  sub : E -> E -> E,
  mul : E -> E -> E,
  div : E -> E -> E
}

type Arith = {
  accept : forall E. ArithAlg[E] -> E
}

-- Evaluator
trait evalArithAlg : ArithAlg[IEval] { self =>
  def num n     = { eval = \_ -> just Value (numV n) }
  def add e1 e2 = { eval = \env ->
    bind Value Value (e1.eval env) (\v1 ->
      bind Value Value (e2.eval env) (\v2 ->
        just Value (numV (fromNum v1 + fromNum v2))))
  }
  def sub e1 e2 = { eval = \env ->
    bind Value Value (e1.eval env) (\v1 ->
      bind Value Value (e2.eval env) (\v2 ->
        just Value (numV (fromNum v1 - fromNum v2))))
  }
  def mul e1 e2 = { eval = \env ->
    bind Value Value (e1.eval env) (\v1 ->
      bind Value Value (e2.eval env) (\v2 ->
        just Value (numV (fromNum v1 * fromNum v2))))
  }
  def div e1 e2 = { eval = \env ->
    bind Value Value (e1.eval env) (\v1 ->
      bind Value Value (e2.eval env) (\v2 ->
        just Value (numV (fromNum v1 / fromNum v2))))
  }
}

-- Pretty pinter
trait ppArithAlg : ArithAlg[IPrint] { self =>
  def num n     = { print = n.toString }
  def add e1 e2 = { print = "(" ++ e1.print ++ " + " ++ e2.print ++ ")"}
  def sub e1 e2 = { print = "(" ++ e1.print ++ " - " ++ e2.print ++ ")"}
  def mul e1 e2 = { print = "(" ++ e1.print ++ " * " ++ e2.print ++ ")"}
  def div e1 e2 = { print = "(" ++ e1.print ++ " / " ++ e2.print ++ ")"}
}

-- Type checker
trait tcArithAlg : ArithAlg[ITCheck] { self =>
  def num n     = { tcheck = \_ -> just Type tnum }
  def add e1 e2 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (bind Type Type (e2.tcheck env) (\t2 ->
          caseType Maybe[Type] t2
            (just Type tnum)
            (nothing Type)))
        (nothing Type))
  }
  def sub e1 e2 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (bind Type Type (e2.tcheck env) (\t2 ->
          caseType Maybe[Type] t2
            (just Type tnum)
            (nothing Type)))
        (nothing Type))
  }
  def mul e1 e2 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (bind Type Type (e2.tcheck env) (\t2 ->
          caseType Maybe[Type] t2
            (just Type tnum)
            (nothing Type)))
        (nothing Type))
  }
  def div e1 e2 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (bind Type Type (e2.tcheck env) (\t2 ->
          caseType Maybe[Type] t2
            (just Type tnum)
            (nothing Type)))
        (nothing Type))
  }
}


def eg1 : Arith = {
  accept = /\E. \f -> f.add (f.mul (f.num 3) (f.num 4)) (f.num 5) }



-----------------------------
-- Add conditional expression
-----------------------------

type BoolArithAlg[E] = ArithAlg[E] & {
  eq  : E -> E -> E,
  le  : E -> E -> E,
  ifexpr : E -> E -> E -> E
}

-- Evaluator
trait evalBoolArithAlg inherits evalArithAlg : BoolArithAlg[IEval] { self =>
  def eq e1 e2        = { eval = \env ->
    bind Value Value (e1.eval env) (\v1 ->
      bind Value Value (e2.eval env) (\v2 ->
        just Value (boolV (fromNum v1 == fromNum v2))))
  }
  def le e1 e2        = { eval = \env ->
    bind Value Value (e1.eval env) (\v1 ->
      bind Value Value (e2.eval env) (\v2 ->
        just Value (boolV (fromNum v1 < fromNum v2))))
  }
  def ifexpr e1 e2 e3 = { eval = \env ->
    bind Value Value (e1.eval env) (\b ->
      if fromBool b
      then e2.eval env
      else e3.eval env)
  }
}

-- Pretty printer
trait ppBoolArithAlg inherits ppArithAlg : BoolArithAlg[IPrint] { self =>
  def eq e1 e2        = { print = "(" ++ e1.print ++ " == " ++ e2.print ++ ")" }
  def le e1 e2        = { print = "(" ++ e1.print ++ " < " ++ e2.print ++ ")" }
  def ifexpr e1 e2 e3 =
    { print = "(if " ++ e1.print ++ " then " ++ e2.print ++ " else " ++ e3.print ++ ")" }
}


-- Type checker
trait tcBoolArithAlg inherits tcArithAlg : BoolArithAlg[ITCheck] { self =>
  def eq e1 e2 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (bind Type Type (e2.tcheck env) (\t2 ->
          caseType Maybe[Type] t2
            (just Type tbool)
            (nothing Type)))
        (nothing Type))
  }
  def le e1 e2 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (bind Type Type (e2.tcheck env) (\t2 ->
          caseType Maybe[Type] t2
            (just Type tbool)
            (nothing Type)))
        (nothing Type))
  }
  def ifexpr e1 e2 e3 = { tcheck = \env ->
    bind Type Type (e1.tcheck env) (\t1 ->
      caseType Maybe[Type] t1
        (nothing Type)
        (bind Type Type (e2.tcheck env) (\t2 ->
          (bind Type Type (e3.tcheck env) (\t3 ->
            caseType Maybe[Type] t2
              (caseType Maybe[Type] t3
                (just Type t2)
                (nothing Type))
              (caseType Maybe[Type] t3
                (nothing Type)
                (just Type t2)))))))
  }
}


type BoolArith = {
  accept : forall E. BoolArithAlg[E] -> E
}

def eg2 : BoolArith = {
  accept = /\E. \f -> f.ifexpr (f.eq (f.num 3) (f.num 5)) (f.num 12) (f.add (f.num 12) (f.num 22))
}


-----------------------------
-- Add variable declarations
-----------------------------

type VarArithAlg[E] = BoolArithAlg[E] & {
  var : String -> E,
  decl : String -> E -> E -> E
}

-- Evaluator
trait evalVarArithAlg inherits evalBoolArithAlg : VarArithAlg[IEval] { self =>
  def var n      = { eval = \env -> lookup Value n env }
  def decl n e b = { eval = \env ->
    bind Value Value (e.eval env) (\v ->
      b.eval (insert Value n v env))
  }
}

-- Pretty printer
trait ppVarArithAlg inherits ppBoolArithAlg : VarArithAlg[IPrint] { self =>
  def var n      = { print = n }
  def decl n e b = { print = "var " ++ n ++ " = " ++ e.print ++ "; " ++ b.print }
}

-- Type checker
trait tcVarArithAlg inherits tcBoolArithAlg : VarArithAlg[ITCheck] { self =>
  def var n      = { tcheck = \env -> lookup Type n env }
  def decl n e b = { tcheck = \env ->
    bind Type Type (e.tcheck env) (\t ->
      b.tcheck (insert Type n t env)
    )
  }
}



type VarArith = {
  accept : forall E. VarArithAlg[E] -> E
}

-- var x = 3; var y = 4; if (x < y) x + 2; else y + 1
def eg3 : VarArith = {
  accept = /\E. \f ->
    f.decl "x" (f.num 3)
      (f.decl "y" (f.num 4)
        (f.ifexpr (f.le (f.var "x") (f.var "y"))
          (f.add (f.var "x") (f.num 2))
          (f.add (f.var "y") (f.num 3))))
}


-----------------------------
-- Add top-level functions
-----------------------------

type ExprAlg[E] = VarArithAlg[E] & {
  call : String -> E -> E
}

type Expr = {
  accept : forall E. ExprAlg[E] -> E
}

type FnAlg[E] = {
  fnAlg : String -> Type -> Expr -> E
}

type Function = {
  accept : forall E. FnAlg[E] -> E
}

def caseFn E (x : Function) (f : String -> Type -> Expr -> E) : E =
  x.accept E { fnAlg = f }

type FEnv = EnvF[Function]

type PgmAlg[E] = {
  pgmAlg : FEnv -> Expr -> E
}

type Program = {
  accept : forall E. PgmAlg[E] -> E
}

-- Evaluator
trait evalExprAlg(fenv : FEnv) inherits evalVarArithAlg : ExprAlg[IEval] { self =>
  def call f arg = { eval = \env ->
    bind Function Value (lookup Function f fenv) (\fn ->
      caseFn Maybe[Value] fn
        (\param typ body ->
          bind Value Value (arg.eval env)
            (\v -> undefined Maybe[Value]) -- need recursive trait?
        )
    )
  }
}



-- Put all together

trait superAlg inherits evalVarArithAlg & ppVarArithAlg & tcVarArithAlg

type SuperAlg = IEval & IPrint & ITCheck

def superAlgInst = new[VarArithAlg[SuperAlg]] superAlg

def evalAndPrint (e : VarArith) : String  =
  let inst : SuperAlg = e.accept SuperAlg superAlgInst
  in if isJust Type (inst.tcheck (empty Type))
     then inst.print ++ " = " ++ (fromNum (fromJust Value (inst.eval (empty Value)))).toString
     else "Type error!"

main = evalAndPrint eg3
