--> "((5.0 - (2.0 + 3.0)) + 3.0) = 3.0"

-- BEGIN_ALGEBRA_DEF
type ExpAlg[E] = {
  lit : Double -> E,
  add : E -> E -> E
}
-- END_ALGEBRA_DEF

-- BEGIN_CHURCH_DEF
type Exp = { accept : forall E . ExpAlg[E] -> E }
-- END_CHURCH_DEF

-- BEGIN_DC_DEF
def lit (n : Double) : Exp = {
  accept = /\E . \f -> f.lit n
}
def add (e1 : Exp) (e2 : Exp) : Exp = {
  accept = /\E . \f -> f.add (e1.accept E f) (e2.accept E f)
}
-- END_DC_DEF


-- BEGIN_EVAL_DEF
type IEval = { eval : Double }
-- END_EVAL_DEF

-- BEGIN_EVAL_IMPL
trait evalAlg { self =>
  def lit (x : Double)            = { eval = x }
  def add (x : IEval) (y : IEval) = { eval = x.eval + y.eval }
}
-- END_EVAL_IMPL


-- BEGIN_SUB_DEF
type SubExpAlg[E] = ExpAlg[E] & { sub : E -> E -> E }
trait subEvalAlg inherits evalAlg { self =>
  def sub (x : IEval) (y : IEval) = { eval = x.eval - y.eval }
}
type ExtExp = { accept: forall E. SubExpAlg[E] -> E }
-- END_SUB_DEF



-- BEGIN_PRINT_DEF
type IPrint = { print : String }
-- END_PRINT_DEF


-- BEGIN_PRINT_IMPL
trait printAlg { self =>
  def lit (x : Double)              = { print = x.toString }
  def add (x : IPrint) (y : IPrint) = { print = "(" ++ x.print ++ " + " ++ y.print ++ ")" }
  def sub (x : IPrint) (y : IPrint) = { print = "(" ++ x.print ++ " - " ++ y.print ++ ")" }
}
-- END_PRINT_IMPL


-- BEGIN_EVAL_PRINT
def sub (e1 : ExtExp) (e2 : ExtExp) : ExtExp = {
  accept = /\E . \f -> f.sub (e1.accept E f) (e2.accept E f)
}
def eval (e : ExtExp) : IEval = e.accept IEval (new[SubExpAlg[IEval]] subEvalAlg)
-- END_EVAL_PRINT
def print (e : ExtExp) : IPrint = e.accept IPrint (new[SubExpAlg[IPrint]] printAlg)

-- BEGIN_EXPRESSION_EG
def e1 : Exp = add (lit 2) (lit 3)
def e2 : ExtExp = sub (lit 5) e1
-- END_EXPRESSION_EG

{-
-- BEGIN_EXPRESSION_WRONG
def e3 : ExtExp = add e2 (lit 3)
-- END_EXPRESSION_WRONG
-}

-- BEGIN_EXPRESSION_CORRECT
def e3 : ExtExp = { accept = /\E. \f -> f.add (e2.accept E f) (f.lit 3) }
-- END_EXPRESSION_CORRECT

-- BEGIN_VISITOR_EG
def o1 = print e3
def o2 = eval e3
main = o1.print ++ " = " ++ o2.eval.toString
-- Output: "((5.0 - (2.0 + 3.0)) + 3.0) = 3.0"
-- END_VISITOR_EG
